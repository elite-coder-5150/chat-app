const chatForm=document.getElementById("chat-form"),chatMessages=document.querySelector(".chat-messages"),roomName=document.getElementById("room-name"),userList=document.getElementById("users"),Qs=require("qs"),{username:username,room:room}=Qs.parse(location.search,{ignoreQueryPrefix:!0}),socket=io();function outputMessage(e){const t=document.createElement("div");t.classList.add("message"),t.innerHTML=` ${e.username} ${e.time} ${e.text} `,document.querySelector(".chat-messages").appendChild(t)}function outputRoomName(e){roomName.innerText=e}function outputUsers(e){userList.innerHTML=`\n        ${e.map((e=>` ${e.username} `)).join("")}\n    `}socket.emit("joinRoom",{username:username,room:room}),socket.on("roomUsers",(({room:e,users:t})=>{outputRoomName(e),outputUsers(t)})),socket.on("message",(e=>{console.log(e),outputMessage(e),chatMessages.scrollTop=chatMessages.scrollHeight})),chatForm.addEventListener("submit",(e=>{e.preventDefault();const t=e.target.elements.msg.value;socket.emit("chatMessage",t),e.target.elements.msg.value="",e.target.elements.msg.focus()}));const dijkstra=(e,t)=>{const s={};for(let t in e)s[t]=1/0;s[t]=0;const o=new Set(Object.keys(e)),r={};for(;o.size>0;){const t=minDistanceNode(o,s);o.delete(t);for(let o in e[t]){const n=e[t][o];n+s[t]<s[o]&&(s[o]=n+s[t],r[o]=t)}}return[s,r]},minDistanceNode=(e,t)=>Array.from(e).reduce(((e,s)=>t[s]<t[e]?s:e)),path=(e,t)=>{const s=[t];for(;e[t];)s.push(e[t]),t=e[t];return s.reverse()},graph={start:{A:5,B:2},A:{C:4,D:2},B:{A:8,D:7},C:{D:6,finish:3},D:{finish:1},finish:{}},[dist,previous]=dijkstra(graph,"start");console.log(dist);